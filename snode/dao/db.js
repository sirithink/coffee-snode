// Generated by CoffeeScript 1.6.2
var config, db, log, logentries, pool, poolModule,
  __slice = [].slice;

logentries = require('node-logentries');

poolModule = require('generic-pool');

config = require('../config');

log = logentries.logger(config.logToken);

/*
* mysql generic pool
* @type {Object}
*/


pool = poolModule.Pool({
  name: 'mysql',
  create: function(callback) {
    var connection;

    connection = require("mysql").createConnection(config.db);
    connection.connect();
    return callback(null, connection);
  },
  destroy: function(client) {
    return client.end();
  },
  max: 10,
  min: 2,
  idleTimeoutMillis: 30000,
  log: false
});

/*
* mysql query
* @param sql
* @param param
* @param callback
*/


exports.db = db = (function() {
  function db() {}

  db.query = function() {
    var args, callback;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (typeof args[args.length - 1] === "function") {
      callback = args.pop();
    } else {
      callback = function() {};
    }
    return pool.acquire(function(error, client) {
      if (error) {
        log.info("" + error);
        return callback(error, null);
      } else {
        return client.query.apply(client, __slice.call(args).concat([function(error, rows) {
          callback(error, rows);
          return pool.release(client);
        }]));
      }
    });
  };

  db.insert = function(table, data, callback) {
    var sqlStr;

    sqlStr = "INSERT INTO `" + table + "` SET ?";
    return this.query(sqlStr, data, callback);
  };

  db.update = function(table, data, params, callback) {
    var dataKeys, dataVals, key, paraKeys, paraVals, sqlStr, val;

    dataKeys = [];
    dataVals = [];
    for (key in data) {
      val = data[key];
      dataKeys.push("`" + key + "` = ?");
      dataVals.push("" + val);
    }
    paraKeys = [];
    paraVals = [];
    for (key in params) {
      val = params[key];
      paraKeys.push("`" + key + "` = ?");
      paraVals.push("" + val);
    }
    sqlStr = "UPDATE `" + table + "` SET " + (dataKeys.join(', ')) + " WHERE " + (paraKeys.join(' AND '));
    return this.query(sqlStr, dataVals.concat(paraVals), callback);
  };

  db["delete"] = function(table, data, callback) {
    var columns, key, sqlStr, val, values;

    columns = [];
    values = [];
    for (key in data) {
      val = data[key];
      columns.push("`" + key + "` = ?");
      values.push("" + val);
    }
    sqlStr = "DELETE FROM `" + table + "` WHERE " + (columns.join(' AND '));
    return this.query(sqlStr, values, callback);
  };

  return db;

})();
